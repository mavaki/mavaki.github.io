<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://mavaki.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://mavaki.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-08-31T00:42:51+00:00</updated><id>https://mavaki.github.io/feed.xml</id><title type="html">blank</title><subtitle>my hacking showcase </subtitle><entry><title type="html">reading 01: to hack or not to hack</title><link href="https://mavaki.github.io/blog/2024/hackers-01/" rel="alternate" type="text/html" title="reading 01: to hack or not to hack"/><published>2024-08-31T00:15:00+00:00</published><updated>2024-08-31T00:15:00+00:00</updated><id>https://mavaki.github.io/blog/2024/hackers-01</id><content type="html" xml:base="https://mavaki.github.io/blog/2024/hackers-01/"><![CDATA[<p>Steven Levy presents the “true hacker” as an artist of sorts: he sees immense beauty in the computer, believing that computers are the universal medium through which humans can express themselves. He is constantly using and imitating the works of his fellow artists to create new works, which does not upset the other artists in the slightest. On the contrary, these artists are overjoyed when their art is considered so beautiful that it elicits imitation. One could even say that imitation is something that these artists strive for–to create a masterpiece that others admire and use as a basis for future art.</p> <p>It is interesting to note that many true hackers become so involved in hacking that they neglect to have a regular schedule for anything else, such as showering or sleeping. Instead, they delay such things to the infinitesimal degree, until these actions are no longer deemed a choice but a necessity. However, I think that this frequent trait amongst hackers actually points to a deeper quality that is shared by all true hackers: comptetitiveness. They all seek to create the <i>best</i> programs, more for the sake of the art itself than for anything else. This idea is well illustrated by the bumming of the decimal print routine:</p> <blockquote> <p>“More than a competition, the ultimate bumming of the decimal print routine became a sort of hacker Holy Grail. … People would work for hours, seeking a way to do the same thing in fewer lines of code. It became more than a competition; it was a quest.” (Levy, ch. 2)</p> </blockquote> <p>The competitive nature of these true hackers, especially when paired with their unlimited access to scarce computers, fostered an environment that was not unlike that of the Renaissance. The hackers developed different works of art in the form of hardware and software, occasionally spurred on by an idea from a professor, a contest with a cash prize, or the thrill of setting a new record. For example, Stewart Nelson designed an interface between a computer and a disk drive at the prompting of Ed Fredkin; Peter Samson schemed The Great Subway Hack to break a Harvard student’s record for traveling to every stop on the New York subway system; and Bill Gosper created the first glider gun in LIFE, receiving the fifty dollar prize offered by John Conway. These pursuits are essentially the modern reincarnation of those during the Renaissance, such as Ghiberti’s masterpiece that won the competition to create the <a href="https://en.wikipedia.org/wiki/North_Doors_of_the_Florence_Baptistery">North Doors of the Florence Baptistery</a>. The only difference is that these hackers created art that opened the doors of the world to a completely new reality.</p> <p>Before picking up Levy’s book, I viewed hackers as the computer enthusiasts who nosed around in places that they shouldn’t. They might pull pranks, such as gaining access to their principal’s email account and informing parents that school would be cancelled the following day. Or they might break into a company’s computer system and lock access until a ransom is paid. In that sense, I admired hackers for discovering ways to bypass a security system, but I wasn’t exactly interested in becoming one myself due to potential disciplinary consequences.</p> <p>But it is now clear to me that the concept of a “true hacker” is quite different than this notion of a hacker. True hackers are tinkerers and creators, hacking “for the sake of having something which [is] in its metaphorical way alive” (Levy, ch. 2). I am inspired by them because they want to change humanity for the better, and they will accept anyone who can help them to further this goal. I aspire to be a true hacker myself because I know how much I have benefited from their endeavors, and it would be great to create hacks for the common good like they have.</p>]]></content><author><name></name></author><category term="hackers"/><category term="ethics"/><summary type="html"><![CDATA[the idea of a hacker]]></summary></entry><entry><title type="html">reading 01: to hack or not to hack</title><link href="https://mavaki.github.io/blog/2024/hackers-01/" rel="alternate" type="text/html" title="reading 01: to hack or not to hack"/><published>2024-08-29T10:00:00+00:00</published><updated>2024-08-29T10:00:00+00:00</updated><id>https://mavaki.github.io/blog/2024/hackers-01</id><content type="html" xml:base="https://mavaki.github.io/blog/2024/hackers-01/"><![CDATA[<p>I have come to believe that a “true hacker” is an artist of sorts.</p> <p>“More than a competition, the ultimate bumming of the decimal print routine became a sort of hacker Holy Grail. … People would work for hours, seeking a way to do the same thing in fewer lines of code. It became more than a competition; it was a quest.” (levy, ch. 2)</p> <p>“We did it twenty-five to thirty percent for the sake of doing it because it was something we could do and do well, and sixty percent for the sake of having something which was in its metaphorical way alive, our offspring, which would do things on its own when we were finished.” (samson, ch. 2)</p> <p>It’s as if they believed monetary payment would tarnish their beautiful work.</p> <p>“Greenblatt would often accompany Beeler to the 1620, where you would punch up your card deck, and stand in line. When your turn came, you’d dump your cards in the reader and get an instant printout from a plotter-printer. “It was sort of a fun, evening thing to do,” Beeler would later recall. “We’d do it the way others might watch a sports game, or go out and have a beer.” It was limited but gratifying.” (ch. 4)</p> <p>“It was common, if you wanted to do a task on a machine and the machine didn’t have the software to do it, to write the proper software so you could do it. This was an impulse that Greenblatt would later elevate to an art form.” (ch. 4)</p> <p>“Gosper was thin, with bird-like features covered by thick spectacles and an unruly head of kinky brown hair. But even a brief meeting with Gosper was enough to convince you that here was someone whose brilliance put things like physical appearance into their properly trivial perspective.” (ch. 4)</p> <p>“the rush of having this live keyboard under you and having this machine respond in milliseconds to what you were doing …” (gosper, ch. 4)</p> <p>“The Right Thing very specifically meant the unique, correct, elegant solution . . . the thing that satisfied all the constraints at the same time, which everyone seemed to believe existed for most problems.” (gosper, ch. 4)</p> <p>“To a hacker, a closed door is an insult, and a locked door is an outrage” (ch. 5)</p> <p>“[Van Gogh] experienced more financial difficulties than financial success.” (<a href="https://www.sarahransomeart.com/blog/how-wealthy-was-vincent-van-gogh">Sarah Ransome</a>)</p> <p><a href="https://en.wikipedia.org/wiki/North_Doors_of_the_Florence_Baptistery">North Doors of the Florence Baptistery</a></p>]]></content><author><name></name></author><category term="hackers"/><category term="ethics"/><summary type="html"><![CDATA[the idea of a hacker]]></summary></entry><entry><title type="html">third-party development boards in Arduino IDE</title><link href="https://mavaki.github.io/blog/2024/development-boards/" rel="alternate" type="text/html" title="third-party development boards in Arduino IDE"/><published>2024-06-21T20:25:00+00:00</published><updated>2024-06-21T20:25:00+00:00</updated><id>https://mavaki.github.io/blog/2024/development-boards</id><content type="html" xml:base="https://mavaki.github.io/blog/2024/development-boards/"><![CDATA[<style>#boards{border-collapse:collapse;width:100%}#boards td,#boards th{border:1px;text-align:left;padding:8px}#boards th{padding-top:12px;padding-bottom:12px;text-align:left;background-color:#676767;color:white}</style> <p>Getting started with Arduino IDE as a newbie is relatively straightforward, but it can be difficult when you’re dealing with third-party boards that don’t work out of the box. While I managed to get most of my devices working, an <code class="language-plaintext highlighter-rouge">Adafruit Bluefruit</code> kept throwing this error at me:</p> <blockquote> <p>A fatal error occurred: Failed to connect to ESP32: No serial data received.</p> </blockquote> <p>Since it was challenging to find useful resources, I decided to write this blog post about the topic. I’m going to explain how to set up some common thiry-party boards in Arduino IDE using Linux, but the same process should apply for similar boards and different operating systems.</p> <p><br/></p> <table id="boards"> <tr> <th>Board</th> <th>Package</th> <th>URL</th> </tr> <tr> <td><a href="https://www.keyestudio.com/products/keyestudio-esp32-plus-development-board-woroom-32-module-wifibluetooth-compatible-with-arduino">Keyestudio ESP32 PLUS Development Board</a></td> <td>esp32 by Espressif Systems</td> <td>https://dl.espressif.com/dl/package_esp32_index.json</td> </tr> <tr> <td><a href="https://www.seeedstudio.com/Seeed-XIAO-ESP32C3-p-5431.html">Seeed Studio XIAO ESP32C3</a></td> <td>esp32 by Espressif Systems</td> <td>https://files.seeedstudio.com/arduino/package_seeeduino_boards_index.json</td> </tr> <tr> <td><a href="https://www.adafruit.com/product/2821">Adafruit Feather HUZZAH with ESP8266</a></td> <td>esp8266 by ESP8266 Community</td> <td>http://arduino.esp8266.com/stable/package_esp8266com_index.json</td> </tr> <tr> <td><a href="https://www.digikey.ie/en/products/detail/adafruit-industries-llc/3406/7034992">Adafruit Feather nRF52 Bluefruit LE</a></td> <td>Adafruit nRF52 by Adafruit</td> <td>https://adafruit.github.io/arduino-board-index/package_adafruit_index.json</td> </tr> </table> <p><br/></p> <p>In the <code class="language-plaintext highlighter-rouge">Board</code> column you will find the name of each board hyperlinked to the manufacturer’s site. (Note that this is not the same URL that is included in the <code class="language-plaintext highlighter-rouge">URL</code> column.) Once you have identified your board, you will need to open Arduino IDE and navigate to the <code class="language-plaintext highlighter-rouge">Boards Manager</code> (<code class="language-plaintext highlighter-rouge">Tools</code> &gt; <code class="language-plaintext highlighter-rouge">Board</code> &gt; <code class="language-plaintext highlighter-rouge">Boards Manager</code>). Then you can search for the appropriate package (listed in the <code class="language-plaintext highlighter-rouge">Package</code> column) for your board. Click <code class="language-plaintext highlighter-rouge">Install</code> and wait until the installation is complete. Finally, copy the corresponding URL from the <code class="language-plaintext highlighter-rouge">URL</code> column and open the <code class="language-plaintext highlighter-rouge">Preferences</code> menu (<code class="language-plaintext highlighter-rouge">File</code> &gt; <code class="language-plaintext highlighter-rouge">Preferences</code>), where you can paste the URL under <code class="language-plaintext highlighter-rouge">Additional boards manager URLs</code>. (This is a platform index URL that allows users to install and update platforms that are not included in the official package list.) Now you should be all set to select your device and begin programming, which I describe below.</p> <p>If you’re working with an original nRF52832 device like the <code class="language-plaintext highlighter-rouge">Adafruit Feather nRF52 Bluefruit LE</code>, you will likely need to update the bootloader. If you’re using <i>Linux</i>, you will first need to install the <code class="language-plaintext highlighter-rouge">adafruit-nrfutil</code> package. The <a href="https://aur.archlinux.org/packages/python-adafruit-nrfutil">python-adafruit-nrfutil</a> package on the AUR worked for me, but there are also instructions on <a href="https://aur.archlinux.org/packages/python-adafruit-nrfutil">Adafruit</a> for other distributions. I was then able to select <code class="language-plaintext highlighter-rouge">Tools</code> &gt; <code class="language-plaintext highlighter-rouge">Burn Bootloader</code>, which flashed my <code class="language-plaintext highlighter-rouge">Adafruit nRF52</code> and got everything running smoothly. If you experience any issues, you can refer to <a href="https://learn.adafruit.com/bluefruit-nrf52-feather-learning-guide/updating-the-bootloader">Adafruit</a>.</p> <p><br/></p> <table id="boards"> <tr> <th>Group</th> <th>Entry</th> <th>Port</th> </tr> <tr> <td>esp32</td> <td>ESP32-WROOM-DA Module</td> <td>/dev/ttyUSB0</td> </tr> <tr> <td>esp32</td> <td>XIAO_ESP32C3</td> <td>/dev/ttyACM0</td> </tr> <tr> <td>esp8266</td> <td>Adafruit Feather HUZZAH ESP8266</td> <td>/dev/ttyUSB0</td> </tr> <tr> <td>Adafruit nRF52</td> <td>Adafruit Feather nRF52832</td> <td>/dev/ttyUSB0</td> </tr> </table> <p><br/></p> <p>This table lists the information that you will need to select your board in Arduino IDE, and I’ve also included the port that I used (although yours might be different). Open <code class="language-plaintext highlighter-rouge">Tools</code> and hover over the <code class="language-plaintext highlighter-rouge">Board</code> option, where you will see the different packages that you have installed. Then refer to the <code class="language-plaintext highlighter-rouge">Group</code> and <code class="language-plaintext highlighter-rouge">Entry</code> columns to select your board. If your device is plugged in, the port should have been selected automatically, but you can also select it manually under <code class="language-plaintext highlighter-rouge">Tools</code> &gt; <code class="language-plaintext highlighter-rouge">Port</code>.</p> <p>At this point, you should be all set to get your board blinking ;) If you have any questions, feel free to leave a comment below.</p>]]></content><author><name></name></author><category term="arduino"/><category term="linux,"/><category term="research"/><summary type="html"><![CDATA[a hassel-free guide for setting up Arduino alternatives]]></summary></entry></feed>