<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://mavaki.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://mavaki.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-12-03T03:13:06+00:00</updated><id>https://mavaki.github.io/feed.xml</id><title type="html">blank</title><subtitle>my hacking showcase </subtitle><entry><title type="html">reading 11: linus and linux</title><link href="https://mavaki.github.io/blog/2024/hackers-11/" rel="alternate" type="text/html" title="reading 11: linus and linux"/><published>2024-12-03T00:00:00+00:00</published><updated>2024-12-03T00:00:00+00:00</updated><id>https://mavaki.github.io/blog/2024/hackers-11</id><content type="html" xml:base="https://mavaki.github.io/blog/2024/hackers-11/"><![CDATA[<p>In the early days of Linux, Linus Torvalds was not really preparing to create an operating system of world renown. He was trying to address the problems of his current operating system (Minix). And since he was unable to get his hands on POSIX quickly, he initially wrote his own system calls based on manuals for Sun Microsystems’ version of Unix. I feel as though this primary stage was the most difficult stage of Linux’s development. Linus was stationed inside his room for months, leaving only to address his basic human needs and to attend the weekly Spektrum meeting. Once Linus actually had a working operating system, people started jumping onto the project and doing a lot of the work for him. I’m not trying to say that this stage was easy, but Linus basically was able to take a step back and allow other developers to take some of the load off his back.</p> <p>It’s easy to view Linus as a “god” and to place him on a pedestal. And it’s clear that some people literally do this, such as the person who asked Linus to give the eulogy at his father’s funeral. But I think he just found something that he was interested in and shot for the stars. In my opinion, he doesn’t stick out like a sore thumb or anything. He wasn’t even the type of person to lose sleep and work overtime to solve his problems. It was nice to read the following quote in <i>Just For Fun</i>:</p> <blockquote> <p>“A lot of people believe in working long days and doing double, triple, or even quadruple shifts. I’m not one of them. Neither Transmeta nor Linux has ever gotten in the way of a good night’s sleep … You may lose a few hours of your productive daytime if you sleep, oh, say, ten hours a day, but those few hours when you are awake you’re alert, and your brain functions on all six cylinders. Or four, or whatever.” (King of the BALL, III)</p> </blockquote> <p>As someone who needs a good 7-8 hours of sleep per night, I was a bit relieved to discover that Linus is the same way. He isn’t just some workaholic who codes instead of sleeping. In all honesty, I don’t think Linus is the smartest or most disciplined person in the world. In fact, I’m quite positive that he is not. He just found his passion.</p> <p>Linus is counter-cultural in many ways, and it was nice that he was able to articulate his differences clearly. I thought that his comments on Steve Jobs and Richard Stallman said as much about each of these men as they did about Linus himself. Here are some highlights:</p> <blockquote> <p>“We had basic differences in how we viewed the world. Steve was Steve, exactly as the press portrays him. He was interested in his own goals, and especially the marketing side. I was interested in the technical side, and not very interested in either his goals or his arguments.” (KotB, IV)</p> </blockquote> <blockquote> <p>“The thing I find hugely irritating about Richard is not that he believes that Linux—because its kernel relied on applications from the gnu software project—should more rightly be called “gnu/Linux.” It is not that he openly resents me for being a poster boy for open source even though he was sharing code while I was still sleeping in a laundry basket. No, the reason I find him so pesty is that he continually complains about other people not using the GPL.” (KofB, X)</p> </blockquote> <p>Linus believes deeply in personal freedom. What bothers him about Steve Jobs and Richard Stallman is that they want and even expect Linus to agree with them. Steve expected Linus to agree with him that Mac OS was the best operating system there was, and he wanted Linus to leave his open source stuff behind to join him at Apple. Richard wanted Linus to force the GPL onto other people in an almost proselytical way. But, in his own words, Linus “wanted to decide for [himself]. [He’s] very much against unnecessary rules imposed by society. [He’s] a big believer that you should be able to do whatever you want in the privacy of your own home as long as you don’t hurt anybody else” (KotB, X).</p> <p>On the other hand, “Richard Stallman wants to make everything open source. To him, it’s a political struggle, and he wants to use the GPL as a way to drive open source. He sees no other alternative” (KotB, X). While Richard Stallman’s view of success has to do with the GPL and making open source movement take over the world, Linus doesn’t even include open source in his definition of success. Linus views success in terms of freedom and results. He doesn’t believe in imposing his beliefs or values on other people. He doesn’t believe that success is defined by the way things happen. He defines success in terms of the nature of something—what it is and what makes it good. For example, Linus could explain to you why thinks that an operating system like Mach is not “successful” by solely discussing its characteristics and features. He can explain why he prefers the monolithic kernel of Linux to any microkernel-based operating system. In the end, Linus embraces open source because it made his project successful in a way that he never imagined. Open source to Linus was merely a byproduct of his quest to create something useful. He writes, “The truth is, I didn’t open source Linux for such lofty reasons. I wanted feedback” (KotB, X).</p> <p>When I really think about it, I realize that Linus cared so much about his project that he was willing to take whatever steps were necessary to end up with the best final product. And he believed that making it open source was that step. And now, many years later, Linus can pinpoint what makes open source different:</p> <blockquote> <p>“One of the least understood pieces of the open source puzzle is how so many good programmers would deign to work for absolutely no money. A word about motivation is in order. In a society where survival is more or less assured, money is not the greatest of motivators. It’s been well established that folks do their best work when they are driven by a passion. When they are having fun. This is as true for playwrights and sculptors and entrepreneurs as it is for software engineers. The open source model gives people the opportunity to live their passion. To have fun. And to work with the world’s best programmers, not the few who happen to be employed by their company. Open source developers strive to earn the esteem of their peers. That’s got to be highly motivating.” (Why Open Source Makes Sense)</p> </blockquote> <p>There might never be another open-source success story as big as Linux, but there doesn’t need to be. But if someone out there thinks that they need more feeback on a project they’re super passionate about, open source could be the answer.</p>]]></content><author><name></name></author><category term="hackers"/><category term="open-source"/><summary type="html"><![CDATA[the success of open source]]></summary></entry><entry><title type="html">reading 10: linus torvalds</title><link href="https://mavaki.github.io/blog/2024/hackers-10/" rel="alternate" type="text/html" title="reading 10: linus torvalds"/><published>2024-11-24T23:00:00+00:00</published><updated>2024-11-24T23:00:00+00:00</updated><id>https://mavaki.github.io/blog/2024/hackers-10</id><content type="html" xml:base="https://mavaki.github.io/blog/2024/hackers-10/"><![CDATA[<p>It was really neat to read the story of Linux and how hackers worked together <i>just for fun</i> to create an operating system of everlasting value. One of the coolest aspects of the story is that Linus Torvalds didn’t aspire to create the international phenomenon that he did. He was really just trying to address the shortcomings of Minix. It was funny that he accidentally destroyed his Minix partition, which made me recall how I accidentally wiped my Windows partition on my Microsoft Surface Go 3. Looking back, I really wish I hadn’t gone with a Microsoft product, but I was a naive, budding computer scientist (and at least it only runs Linux now).</p> <p>Linus gained access to computers at a young age, which obviously helped him to become a very talented programmer by the time he was in college. His unique family situation afforded him the ability to stick around the house and invest all his efforts into programming. I think his relationship with his mom was tremendously important because she never really questioned what he did or pushed him to get a job.</p> <p>I think Linus’s real motivation behind creating his own operating system was the fact that he was using his computer so much and it didn’t perform and act exactly how he wanted it to. One can only put up with bothersome things for so long, and I think Linus eventually reached that point where he could no longer live with Minix’s bad terminal emulation and lack of job-control functionality. Thus, it was really a solo endeavour, but when others caught on to what he was doing, they realized the impact of it and wanted to contribute.</p> <p>It’s hard for me to say what my current itches are right now. One thing I’m very interested in doing is putting up a board game on Board Game Arena. I think the learning curve will be a little high, especially because I haven’t programmed in PHP and only have limited experience with SQL. I was able to set up the environment last spring, but I haven’t done much with it since. I do love that Board Game Arena is fully open source code, and it’s great for me to play a game quickly without having to set up the game and find people to play with me. Maybe my itch right now is really getting comfortable with Linux. I think there’s a lot I could learn, so I can see myself digging into <i>How Linux Works</i> or the <i>Linux Bible</i>.</p> <p>I definitely want my story to be more like Linus’s in the sense that he was just doing what he did best to fill a gap in the world. It seems like people often sacrifice their morals and happiness to make good money, but I aspire to find that job where my greatest talent meets a need in the world. In my opinion, there are many companies that don’t fill a need in the world (including many social media apps), so I’m definitely veering away from those as I apply to work for different companies. I hope that I can have as much fun in my career or side projects as Linus did in creating Linux, but only time will tell.</p>]]></content><author><name></name></author><category term="hackers"/><category term="open-source,"/><category term="linux"/><summary type="html"><![CDATA[the birth of an operating system]]></summary></entry><entry><title type="html">reading 09: the magic cauldron</title><link href="https://mavaki.github.io/blog/2024/hackers-09/" rel="alternate" type="text/html" title="reading 09: the magic cauldron"/><published>2024-11-16T02:45:00+00:00</published><updated>2024-11-16T02:45:00+00:00</updated><id>https://mavaki.github.io/blog/2024/hackers-09</id><content type="html" xml:base="https://mavaki.github.io/blog/2024/hackers-09/"><![CDATA[<p>The “services instead of software” business model feels strange in light of companies like Apple, Microsoft, and Adobe. I think part of what keeps consumers using iOS and Windows is the vast network of other people who use the same software and the fact that they don’t want to invest their time learning something else. In other words, they’ve grown accustomed to it and understand it more than the alternatives. But considering the boom in smartphone technology that has happened during my lifetime, I feel as though the improvements are slowing down. It seems like the main difference between subsequent iPhone releases nowadays is an increase in the number of cameras and minor cosmetic changes like new colors or useless buttons. What really keeps Apple at the top is their domination of the smartphone market early on which attracted tons of users and led to iPhone-user bubbles. Every iPhone user freaks out when that one person uses Android and they either have to accept text messages being green instead of blue or switch to some third-party app like WhatsApp or GroupMe. I don’t think Apple will ever become open-source because they have absolutely no pressure to do so.</p> <p>However, I do believe that software products like Adobe Photoshop will eventually become open-source because they aren’t tightly bound to a specific physical product like iOS is bound to the iPhone. There are alternatives to Photoshop that are open-source, and I think that people will eventually shift towards open-source software like DaVinci Resolve. Or maybe open core is something that we might begin to see more frequently. The peer review aspect of open source allows for much greater improvement, but unless companies really feel the pressure to shift, will they ever do it? Mozilla clearly had a motive when they became open-source, but it’s hard to say what might persuade companies to make a product open-source.</p> <p>The idea of large service providers taking open source code to power their infrastructure without making financial contributions is a little sad to me. It’s like asking your friend to borrow his car and then taking it cross-country for your job and expecting him to change the oil, brake pads, and tires when they go bad. It only makes sense to pay him something out of gratitude for enabling you to perform your job. And, in the case of open-source software, there are often improvements upon the old software that make it even better. So it’s as though your friend is constantly adding new features to your car and even buying a new one for you now and then.</p> <p>The open source business model still makes sense and has power, but it seems like funding is problematic. Every time I open Wikipedia or Thunderbird, there are advertisements asking for small donations. I guess I should probably give something to the open-source applications that I’m so fond of. I’m criticizing large companies, but I think everyone should try to promote the software they love in some way, shape, or form. The developers give up their most valuable resource–time–and simply ask the rest of us for a little cash. I’ve become numb to the ads over time, but I think a better campaign for donations could go a really long way.</p>]]></content><author><name></name></author><category term="hackers"/><category term="open-source"/><summary type="html"><![CDATA[sustaining the open-source business model]]></summary></entry><entry><title type="html">reading 08: the noosphere</title><link href="https://mavaki.github.io/blog/2024/hackers-08/" rel="alternate" type="text/html" title="reading 08: the noosphere"/><published>2024-11-07T13:45:00+00:00</published><updated>2024-11-07T13:45:00+00:00</updated><id>https://mavaki.github.io/blog/2024/hackers-08</id><content type="html" xml:base="https://mavaki.github.io/blog/2024/hackers-08/"><![CDATA[<p>I believe that most programmers contribute to open source out of passion. The might start using a tool or application that they greatly admire, and the sheer beauty of it makes them want to be a part of it. More specifically, one could say that it is a mix of ambition and admiration that brings open source to life. I think that admiration inspires one to improve applications and share it with more people, whereas ambition inspires one to seek association with the project. In my opinion, admiration is the better of the two, but both are objectively good as they each help open source.</p> <p>I found ESR’s list of taboos rather interesting. I had never read about the “strong social pressure against forking projects” or experienced the pressure myself. In fact, when I first made a website, I forked GitHub’s <a href="https://github.com/github/personal-website">personal-website</a> repository, and the README even encouraged users to fork the project. I suppose that certain applications need to be forked by the users to function, but I do see why forking certain tools would be strange. And when people do fork projects, there’s probably a good chance that they don’t really end up contributing to the living project as they are more focused on their own forked one. The next couple points are more clear to me. I think it’s obvious that a moderator should be involved (even if only to review) in distributing changes to a project. And removing a person’s name from a project history clearly undermines all their work, which they should forever receive credit for. I guess in the past I have maybe learned something from someone’s code that I then integrated into what I was working on. I feel as though I should have given them credit, but I really didn’t think too hard about it. In the future, that’s something I should definitely be more considerate about.</p> <p>I wanted to comment on a couple of rules that ESR details regarding hacker culture. Here is the first:</p> <blockquote> <p>Utilization is the sincerest form of flattery—and category killers are better than also-rans.</p> </blockquote> <p>If we consider a really impressive program that no one is really compelled to use, then is it even good at all? This rule basically points out that a program is really only as good as how useful or functional it is. Of course, some projects might not get enough exposure to really make them big, but maybe it’s just natural for the best programs to be brought into the light by one way or another. Linux is a testament to that. Here is the second rule that stood out to me:</p> <blockquote> <p>Continued devotion to hard, boring work (like debugging, or writing documentation) is more praiseworthy than cherrypicking the fun and easy hacks.</p> </blockquote> <p>Sometimes we have to bite th bullet and accept the smaller tasks that need to be done. I fully agree that subjecting oneself to accomplishing these small tasks is worth more praise than doing all the fun stuff. Otherwise, we would simply be left with neat programs that many people wouldn’t be willing or able to learn how to use on their own.</p> <p>Ultimately, open source has a very diverse community that should seek to be inclusive to people regardless of their motives. I find the hacker humility wonderful, but I almost wish that humility wasn’t embedded in hacker culture as it might dissuade certain programmers from contributing.</p>]]></content><author><name></name></author><category term="hackers"/><category term="open-source"/><summary type="html"><![CDATA[open-source customs]]></summary></entry><entry><title type="html">reading 07: the bazaar</title><link href="https://mavaki.github.io/blog/2024/hackers-07/" rel="alternate" type="text/html" title="reading 07: the bazaar"/><published>2024-10-31T13:15:00+00:00</published><updated>2024-10-31T13:15:00+00:00</updated><id>https://mavaki.github.io/blog/2024/hackers-07</id><content type="html" xml:base="https://mavaki.github.io/blog/2024/hackers-07/"><![CDATA[<p>The bazaar model of software development is certainly superior to the cathedral model. If we liken programming to music, then the bazaar model would be a band that creates their own music and the cathedral model would be musicians who are asked to play pieces that someone else wrote. There is, of course, beautiful music in both cases, but the bazaar-style band is where it all starts: the members all build off of each other and pour their heart and time into creating something new and worthy of praise. And, if it’s good enough, then maybe some other musicians will learn it and be inspired to use it as a starting point for something new.</p> <p>I believe that the most crucial principle that ESR enumerates is the first: “Every good work of software starts by scratching a developer’s personal itch.” We’ve all been a part of that project where the interest isn’t there, and we’ve all seen (or been lucky to be a part of) the project that goes above and beyond simply because there is passion. Ultimately, the cathedral model works because people have their job on the line, but the bazaar style lets the creative juices flow and paves the way for great software to be written.</p> <p>I also found ESR’s second point very interesting: “Good programmers know what to write. Great ones know what to rewrite (and reuse).” There’s no need to start from scratch on every project when there are a lot of good starting points that exist. In fact, in many of my classes we will work an example in class that has many things in common with the homework. To ignore such parallels might even be a disgrace to the professor. The one problem with such an approach, however, is potentially lacking a complete understanding of the code so that more time is wasted down the road when one runs into problems.</p> <p>One thing that seemed strange to me at first was ESR’s claim that “one cannot code from the ground up in bazaar style.” In other words, “your nascent developer community needs to have something runnable and testable to play with.” People need to see a program that can eventually be developed into something great. (And, as ESR describes, Mozilla suffered by lacking this at first.) I think that the underlying assumption here is that the bazaar style isn’t meant to accomodate huge changes at once. Rather, it fosters an environment where lots of lots of small changes amount to something tremendous over time. This is even seen in the development of Fetchmail that ESR describes.</p> <p>As we go into the second half of the semester, I will be thinking in particular about a personal itch that I want to scratch, or at least an interesting problem to solve. I don’t want to be in a position where I want to pass off my third project to a competent successor. I think the coolest thing might be to contribute to an open-source project that I like. It’d be nice to have maintain a PKGBUILD on the AUR one day, or to join the band of contributors to Mozilla. I feel as though there’s a lot to learn in the broad and growing field of computer science, but it’s always fun to surprise myself to see what I can learn and contribute with a little interest and inspiration.</p>]]></content><author><name></name></author><category term="hackers"/><category term="open-source"/><summary type="html"><![CDATA[the best form of software development]]></summary></entry><entry><title type="html">reading 06: wealth</title><link href="https://mavaki.github.io/blog/2024/hackers-06/" rel="alternate" type="text/html" title="reading 06: wealth"/><published>2024-10-14T03:30:00+00:00</published><updated>2024-10-14T03:30:00+00:00</updated><id>https://mavaki.github.io/blog/2024/hackers-06</id><content type="html" xml:base="https://mavaki.github.io/blog/2024/hackers-06/"><![CDATA[<p>Creating my own company is an enticing thought, but I think I would need to really believe in the idea of the company. If I truly believed that my company would attract a large number of users, I don’t think I would be very frightened to start it. The degree of fear that I would have when starting a company would probably be inversely proportional to my degree of faith in the company. I definitely want to get some experience under my belt before considering a startup. It helps to get a general overview of how a company works before starting your own, and any experience in more programming is useful.</p> <p>Retiring early would probably be a main motivation of mine if I actually followed through with starting a company. The idea of working hard and then relaxing is my general approach to life. I don’t always follow that to the point, but I feel good about myself when I do. I suppose the thing that wealth affords a person is the ability to work on whatever they want. I would maybe pick up piano or guitar, or try to hack something that I actually want to hack (not something to make money).</p> <p>On the topic of income, I find it silly that people focus on what the rich have. A widening income gap generally means that everyone does better, but that the rich might do even better comparatively. But it isn’t really worthwhile to fixate on the rich when everyone is better off as a whole. Unshackling the rich is the clear solution. And often, the rich will be more willing to invest in new ventures, creating new job opportunities and putting money back into the economy.</p> <p>So what is the next application that will improve technology and potentially improve living standards in the world? I really think that people want a step away from technology, particularly in regard to the smartphone. Companies are releasing “dummy phones” that lack things like games, internet browsers, and social media. People are starting to realize that their phones can be abused, and they lack the ability to restrain themselves from spending 5+ hours on their phone every day.</p> <p>Thus, I believe that the next technological advancement will be something that allows us to harness technology so that it is not running our lives. By restraining our freedom with technology, I think that we will actually be more free to experience its good attributes fully. I’m not entirely sure what this new advancement might look like, but I do believe that we need a better approach to smartphone use. There’s a million different texting apps, social media platforms, and games. What if your phone was able to identify the urgency level of your texts and allow you to be notified at only a few times during the day? I get tired of checking my phone or getting group chat notifications that really don’t pertain to me at all. If there were a way to filter texts and calls, or have them auto-delay until the right time before flashing on your screen, I would be more at ease with myself. I need a better balance of being available and being in the zone for work.</p>]]></content><author><name></name></author><category term="hackers"/><category term="startups"/><summary type="html"><![CDATA[the next big thing]]></summary></entry><entry><title type="html">reading 05: programming languages</title><link href="https://mavaki.github.io/blog/2024/hackers-05/" rel="alternate" type="text/html" title="reading 05: programming languages"/><published>2024-10-06T21:45:00+00:00</published><updated>2024-10-06T21:45:00+00:00</updated><id>https://mavaki.github.io/blog/2024/hackers-05</id><content type="html" xml:base="https://mavaki.github.io/blog/2024/hackers-05/"><![CDATA[<p>Programming languages require different approaches based on how they represent, change, and store data. I guess the first time I really thought differently about programming languages was when I learned Scheme for Programming Paradigms. The parentheses were strange, but the language allowed me to truly grasp recursion. One of the Scheme patterns that Prof. McMillan instilled in us was “process the car, recurse on the cdr.” After a while of using that pattern, things start to click, and the world of Scheme opened up before my eyes. The recursion mindset became natural unlike the recursion I had done in C for Fundamentals of Computing. I wasn’t surprised when I came across this quote from Paul Graham:</p> <blockquote> <p>“So how much shorter are your programs if you write them in Lisp? Most of the numbers I’ve heard for Lisp versus C, for example, have been around 7-10x.”</p> </blockquote> <p>I hadn’t really considered languages being “better” than others before. I thought it came down to personal preference, being interpreted or compiled, and some metrics like speed. But if it’s really true that Lisp is 7-10x faster than C, then it would seem obvious that Lisp is a more powerful language, especially considering that the 200,000-line Common Lisp core of ITA’s application “humiliates [Travelocity and Expedia] technologically.” I certainly thought Scheme was neat, but I didn’t really think about how concise or powerful it was. I’m interested in venturing back to it now after reading Paul Graham’s opinions on the matter.</p> <p>But what is it that makes Lisp/Scheme “simply the most powerful language available”? And what’s lacking in our current languages? Paul Graham claims that macros make Lisp very unique, almost free from syntax in a sense. The way he describes it makes Lisp seem like Linux, devoid of the gross features of Microsoft that restrict your hacking freedom. Perhaps, though, languages aren’t lacking features so much as programmers are lacking time. Paul Graham even says that he “doesn’t expect to convince anyone (over 25) to go out and learn Lisp” (p. 178). Programmers get comfortable with one language that their company expects them to use, and they don’t have the resources to learn more powerful languages that could get the job done better.</p> <p>I imagine that Python, C, and Lisp will all persist far into the future. They essentially hit all three levels of programming, with Python being the easiest and Lisp being the most challenging. While you can learn Python from just about any book or website, it seems like Lisp requires your brain to change habits. I think that the nerds who appreciate Lisp will probably ensure it never dies out, whereas Python could more easily be replaced by something else simple and intuitive. I hope more mind-streching languages arise to give hackers the edge in their startups. Or maybe Lisp can already do that for them.</p>]]></content><author><name></name></author><category term="hackers"/><category term="ethics"/><summary type="html"><![CDATA[the future of computer science]]></summary></entry><entry><title type="html">reading 04: painting code</title><link href="https://mavaki.github.io/blog/2024/hackers-04/" rel="alternate" type="text/html" title="reading 04: painting code"/><published>2024-09-18T05:45:00+00:00</published><updated>2024-09-18T05:45:00+00:00</updated><id>https://mavaki.github.io/blog/2024/hackers-04</id><content type="html" xml:base="https://mavaki.github.io/blog/2024/hackers-04/"><![CDATA[<p>I found <i>Chapter 1: Why Nerds Are Unpopular</i> interesting because popularity didn’t seem to be as big of a deal in my elementary and middle schools. In my elementary school, each grade was divided into classrooms with roughly 25 students, and each classroom had two tables for lunch. Naturally, the girls sat at one of the tables and the guys sat at the other. I felt that, while some students were more popular than others, most students had their group of friends and didn’t necessarily want to be friends with the popular ones. Perhaps, the only time popularity really seemed to be relevant to me was when I entered middle school at small, all-boys Catholic school where I didn’t know anybody. I just wanted to make friends in general, and the popular kids seemed to be pretty good at befriending one another. But, eventually, I met all 46 guys in my class and found a group that I liked. So my experience is pretty different than the one that Paul Graham describes. However, I was interested in his reasoning for why the real world is more hospitable to nerds:</p> <blockquote> <p>I think the important thing about the real world is not that it’s populated by adults, but that it’s very large, and the things you do have real effects. (Hackers &amp; Painters, ch. 1)</p> </blockquote> <p>This is a reasonable claim, although nowadays I feel as though smartphones have supressed certain bad behaviors because there have been numerous instances of people saying or doing something and having to face the consequences. It’s unfortunate that people have lost their jobs over one bad decision, but somehow I think that the overall smartphone culture has given a little more power back to the nerds. And the advances in technology allow nerds (at least, computer scientists) to spend limitless time learning from the hands-on computer experience. The following quote summarizes this sentiment well:</p> <blockquote> <p>In hacking, like painting, work comes in cycles. Sometimes you get excited about a new project and you want to work sixteen hours a day on it. Other times nothing seems interesting. (Hackers &amp; Painters, ch. 2)</p> </blockquote> <p>I sometimes worry about not being passionate about work in my future job. I’ve definitely been in situations where I uttely lack an interest in the problem (aka Logic Design). On the other hand, there are projects where I would prefer to work on them than do anything else. I think there’s a certain threshold at which work becomes bearable, and anything under this threshold just won’t get my full enthusiasm and effort. Recently, I’ve enjoyed working on our spreadsheet project for Distributed Systems, and I often push off work for my other classes to write and bum code for it. Graham’s parallel between painting and hacking ran true for this project:</p> <blockquote> <p>Paintings usually begin with a sketch … [But] sometimes the original plans turn out to be mistaken. Countless paintings, when you look at them in x-rays, turn out to have limbs that have been moved or facial features that have been readjusted. (Hackers &amp; Painters, ch. 2)</p> </blockquote> <p>I especially liked this because I visited the National Gallery of Ireland over the summer, and we got to see one painting with some of its sketches next to it. There were a lot of minor changes that went into the full product, and that’s not something you usually get to see. I suppose GitHub has affored hackers the luxury of seeing their work change, but it’s a bit better to see visually with a painting.</p> <p>Ultimately, I think Paul Graham’s version of a hacker is compatible with Steven Levy’s. I hadn’t considered before that hackers are “the essence of Americanness,” but I agree. The story of Ring, the video doorbell system, as a little hack-turned-startup definitely has an American feel. I’m proud to be an Amer–I mean, hacker.</p>]]></content><author><name></name></author><category term="hackers"/><category term="ethics"/><summary type="html"><![CDATA[an inquiry into popularity and nerds]]></summary></entry><entry><title type="html">reading 02: profit hacking</title><link href="https://mavaki.github.io/blog/2024/hackers-02/" rel="alternate" type="text/html" title="reading 02: profit hacking"/><published>2024-09-08T03:59:00+00:00</published><updated>2024-09-08T03:59:00+00:00</updated><id>https://mavaki.github.io/blog/2024/hackers-02</id><content type="html" xml:base="https://mavaki.github.io/blog/2024/hackers-02/"><![CDATA[<p>The “True Hackers” and the “Hardware Hackers” were similar in their devotion to computers, but Lee Felsenstein felt that the MIT veterans simply “were not as interested in getting computer technology out to the people as they were in elegant, mind-blowing computer pyrotechnics” (Levy ch. 9). The True Hackers would all share the same basic routine, from poor sleep schedules to computer programs and everything in-between. The Hardware Hackers, however, were more dispersed: they were like tinkerers who convened every couple of weeks to share their recent discoveries and learn from those of the others. And it seems to me as though they had a much greater impact in the world of technology given their desire to spread it.</p> <p>Even before the first personal computer was sold, the Hardware Hackers desired to bring the power of the computer to the individual, which is apparent through Community Memory. They set up costly communal computers that were typically reserved for wealthy institutions, and they made it available for the public to personally discover the power and beauty of computing. When Ed Roberts later released the first computer for the masses, the Hackers worked to create plug-ins that actually made it useful. And this later led to all-in-one computers that were for the consumer, especially through the vision of Steve Jobs and the other planners of Apple.</p> <p>I think that a major turning point in the development of the computer had to do with Bill Gates’s coding of Altair BASIC and his subsequent “An Open Letter to Hobbyists.” Gates wrote the article as a result of people copying his Altair BASIC software without paying for it, and it was the first instance that Levy mentions of someone selling software. But this letter and its underlying story irk me in a few ways. First, I think that Bill Gates and his team share part of the responsibility for the stolen software. If you plan on selling a product that can be easily replicated, why would you ever let someone get their hands on it? It seems reasonable to assume that one should take basic precautionary measures to prevent people from stealing his or her software (in the form of paper tapes) if one plans on selling them. The story is not entirely clear on <i>how</i> the paper tape was stolen, but I believe that Bill Gates should have been more aware: The Hardware Hackers who stole his software were accustomed to helping one another and sharing ideas and products amongst themselves for the sake of improvement and sheer fascination. Second, Bill Gates was charging a pretty penny for his software: “$30 for the 4K version, $35 for the 8K version, and $60 for the expanded version” (Wikipedia). That is the equivalent of roughly $175, $205, and $290, respectively, in 2024. I, for one, would probably not pay that for any software. It is true, however, that nowadays there is almost always a free and open-source alternative to a given propriertary application. But even in the 1970s, Tom Pittman felt the same way, and he showed that people <i>were</i> willing to buy software when the price wasn’t as egregious as Gates’s BASIC by selling a 6800 Tiny BASIC interpreter for only five dollars. Third, I think Gates thought too highly of his own software, deeming it to be the remedy to all of the world’s problems. However, I think that part of the reason his software was stolen by so many was because it was right there: someone showed up at a Homebrew meeting with exactly what the hackers wanted, so why would they decline the offer? Levy even indicates that Homebrew members were perfectly capable of writing their own BASIC interpreters, and some did. But when there is an easy solution to a time-consuming project sitting right in front of you for free, I don’t think that many thought too hard about it–they just took it and progressed onto other projects.</p> <p>This is just one instance (and coincidentally one of the first) of the Hacker Ethic becoming compromised. Bill Gates did not want information to be free like the hackers did, and neither did other sprouting companies who were seeking financial success. I really struggle to determine whether or not I think that compromising the ideals of the Hacker Ethic is worth having a larger impact on the world. I don’t know what the world would look like today if the Hacker Ethic had been upheld all of these years. But I want to say that the Hacker Ethic is worth upholding, especially in light of the open-source community and what it has produced. Maybe, however, the Hacker Ethic is too idealistic, almost like Utopia, which is not possible in a world of imperfect human beings.</p>]]></content><author><name></name></author><category term="hackers"/><category term="ethics"/><summary type="html"><![CDATA[the rise of the "Hardware Hackers"]]></summary></entry><entry><title type="html">reading 01: to hack or not to hack</title><link href="https://mavaki.github.io/blog/2024/hackers-01/" rel="alternate" type="text/html" title="reading 01: to hack or not to hack"/><published>2024-08-31T00:15:00+00:00</published><updated>2024-08-31T00:15:00+00:00</updated><id>https://mavaki.github.io/blog/2024/hackers-01</id><content type="html" xml:base="https://mavaki.github.io/blog/2024/hackers-01/"><![CDATA[<p>Steven Levy presents the “true hacker” as an artist of sorts: he sees immense beauty in the computer, believing that computers are the universal medium through which humans can express themselves. He is constantly using and imitating the works of his fellow artists to create new works, which does not upset the other artists in the slightest. On the contrary, these artists are overjoyed when their art is considered so beautiful that it elicits imitation. One could even say that imitation is something that these artists strive for–to create a masterpiece that others admire and use as a basis for future art.</p> <p>It is interesting to note that many true hackers become so involved in hacking that they neglect to have a regular schedule for anything else, such as showering or sleeping. Instead, they delay such things to the infinitesimal degree, until these actions are no longer deemed a choice but a necessity. However, I think that this frequent trait amongst hackers actually points to a deeper quality that is shared by all true hackers: comptetitiveness. They all seek to create the <i>best</i> programs, more for the sake of the art itself than for anything else. This idea is well illustrated by the bumming of the decimal print routine:</p> <blockquote> <p>“More than a competition, the ultimate bumming of the decimal print routine became a sort of hacker Holy Grail. … People would work for hours, seeking a way to do the same thing in fewer lines of code. It became more than a competition; it was a quest.” (Levy, ch. 2)</p> </blockquote> <p>The competitive nature of these true hackers, especially when paired with their unlimited access to scarce computers, fostered an environment that was not unlike that of the Renaissance. The hackers developed different works of art in the form of hardware and software, occasionally spurred on by an idea from a professor, a contest with a cash prize, or the thrill of setting a new record. For example, Stewart Nelson designed an interface between a computer and a disk drive at the prompting of Ed Fredkin; Peter Samson schemed The Great Subway Hack to break a Harvard student’s record for traveling to every stop on the New York subway system; and Bill Gosper created the first glider gun in LIFE, receiving the fifty dollar prize offered by John Conway. These pursuits are essentially the modern reincarnation of those during the Renaissance, such as Ghiberti’s masterpiece that won the competition to create the <a href="https://en.wikipedia.org/wiki/North_Doors_of_the_Florence_Baptistery">North Doors of the Florence Baptistery</a>. The only difference is that these hackers created art that opened the doors of the world to a completely new reality.</p> <p>Before picking up Levy’s book, I viewed hackers as the computer enthusiasts who nosed around in places that they shouldn’t. They might pull pranks, such as gaining access to their principal’s email account and informing parents that school would be cancelled the following day. Or they might break into a company’s computer system and lock access until a ransom is paid. In that sense, I admired hackers for discovering ways to bypass a security system, but I wasn’t exactly interested in becoming one myself due to potential disciplinary consequences.</p> <p>But it is now clear to me that the concept of a “true hacker” is quite different than this notion of a hacker. True hackers are tinkerers and creators, hacking “for the sake of having something which [is] in its metaphorical way alive” (Levy, ch. 2). I am inspired by them because they want to change humanity for the better, and they will accept anyone who can help them to further this goal. I aspire to be a true hacker myself because I know how much I have benefited from their endeavors, and it would be great to create hacks for the common good like they have.</p>]]></content><author><name></name></author><category term="hackers"/><category term="ethics"/><summary type="html"><![CDATA[the idea of a hacker]]></summary></entry></feed>